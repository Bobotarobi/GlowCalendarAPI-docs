openapi: 3.1.0

info:
  title: GlowCalendar
  description: GlowCalendar API Docs
  version: 0.0.1-SNAPSHOT

servers:
  - url: 'https://api.glowcalendar.cfd/api/v1'

paths:

  /authentication/logout:
    delete:
      summary: Invalidate session
      tags:
        - Authentication
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /authentication:
    post:
      summary: Create new session
      tags:
        - Authentication
      requestBody:
        $ref: '#/components/requestBodies/AuthenticationRequest'
      security: [ ]  # No auth required
      responses:
        '200':
          $ref: '#/components/responses/AuthenticationResponse'
        '403':
          description: Authentication error (incorrect credentials)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "INVALID_CREDENTIALS"
                  message:
                    type: string
                    example: "Email or password is incorrect"

  /registration:
    post:
      summary: Create registration code
      description: >
        Create registration code. This code is needed to register a new user.
        Access for admins and teachers.
      tags:
        - Registration
      requestBody:
        $ref: '#/components/requestBodies/RegistrationRequest'
      responses:
        '204':
          description: >
            Use /registration/code next, followed by /registration/verify to complete registration.
          $ref: '#/components/responses/RegistrationResponse'
        '400':
          $ref: '#/components/responses/RegistrationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied. Only admins and teachers can create registration codes

  /registration/code:
    post:
      summary: Register by registration code
      description: >
        Use after POST /registration. Then use /registration/verify to complete registration.
      tags:
        - Registration
      requestBody:
        $ref: '#/components/requestBodies/RegistrationCodeRequest'
      responses:
        '200':
          $ref: '#/components/responses/RegistrationCodeResponse'
        '400':
          $ref: '#/components/responses/RegistrationCodeError'
  /registration/verify:
    post:
      summary: Verify registration by code that was sent to email
      description: Final step of registration. Use after POST /registration/code.
        This will create a new user. Then, you can use /authentication to login.
      tags:
        - Registration
      requestBody:
        $ref: '#/components/requestBodies/RegistrationVerifyRequest'
      responses:
        200:
          description: >
            Registration successful. You can now login with the new user.
        400:
          $ref: '#/components/responses/RegistrationVerifyError'



components:

  requestBodies:
    RegistrationVerifyRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              verification_id:
                type: integer
                example: 4353
              verification_code:
                type: string
                example: "148800"
    RegistrationCodeRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: "gj56f7nh"
              email:
                type: string
                example: "balamutmaks@gmail.com"
              password:
                type: string
                example: "MySuperPassword228*"
            required:
              - code
              - email
              - password

    RegistrationRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              birthday:
                type: string
                format: date
                example: "2000-01-01"
              firstname:
                type: string
                example: "John"
              lastname:
                type: string
                example: "Doe"
              role:
                type: string
                enum: [ STUDENT, TEACHER ]
                example: "STUDENT"
            required:
              - birthday
              - firstname
              - lastname
              - role

    UserVerifyRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: "148800"
            required:
              - code

    AuthenticationRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: "balamutmaks@gmail.com"
              password:
                type: string
                example: "password"
            required:
              - email
              - password

    UserRegisterRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: "survivalboomnetwork@gmail.com"
              code:
                type: string
                example: "gj56f7nh"
              password:
                type: string
                example: "MySuperPassword228*"
            required:
              - email
              - code
              - password

  responses:
    RegistrationVerifyError:
      description: Bad verification id or code
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
                example: "Code {CODE} is invalid"
    RegistrationResponse:
      description: Return id of registration code
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 142

    RegistrationCodeError:
      description: Email is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INVALID_EMAIL"
              message:
                type: string
                example: "Email {EMAIL} is taken"

    RegistrationCodeResponse:
      description: Return ID to be used in /registration/verify
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 142

    RegistrationError:
      description: Registration failed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INVALID_TYPE"
              message:
                type: string
                example: "Birthday {CODE} is invalid"

    UserVerifyError:
      description: Verification failed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "INVALID_CODE"
              message:
                type: string
                example: "Code {CODE} is invalid"

    UserRegisterError:
      description: Registration failed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "EMAIL_TAKEN"
              message:
                type: string
                example: "Email {EMAIL} is already taken"

    AuthenticationResponse:
      description: Login success
      headers:
        Set-Cookie:
          description: Session cookie
          schema:
            type: string
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login successful"

    UnauthorizedError:
      description: Session is expired or not present
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "UNAUTHORIZED"
              message:
                type: string
                example: "Session is invalid or missing"

  securitySchemes:
    cookieAuthentication:
      type: apiKey
      in: cookie
      name: SESSION

security:
  - cookieAuthentication: [ ]
